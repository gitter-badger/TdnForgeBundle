
    /**
{% block phpdoc_method_header %}
     * Get all {{ entity }} types.
     *
{% block documentation %}
{% if swagger %}
     * @ApiDoc(
     *   section = "{{ entity }}",
     *   description = "Get all {{ entity }}.",
     *   resource = true,
     *   output="{{ namespace }}\Entity\{{ entity_namespace }}{{ entity }}",
     *   statusCodes = {
     *     200 = "List of all {{ entity }}",
     *     204 = "No content. Nothing to list."
     *   }
     * )
     *
{% endif %}
{% endblock documentation %}
     * @Rest\QueryParam(
     *   name="offset",
     *   requirements="\d+",
     *   nullable=true,
     *   description="Offset from which to start. Defaults to 0."
     * )
     * @Rest\QueryParam(
     *   name="limit",
     *   requirements="\d+",
     *   default="20",
     *   description="Max number of results."
     * )
     * @Rest\QueryParam(
     *   name="order_by",
     *   nullable=true,
     *   array=true,
     *   description="Order by fields. Must be an array ie. &order_by[name]=ASC&order_by[description]=DESC"
     * )
     * @Rest\QueryParam(
     *   name="filters",
     *   nullable=true,
     *   array=true,
     *   description="Filter by fields. Must be an array ie. &filters[id]=3"
     * )
     *
     * @Rest\View(serializerEnableMaxDepthChecks=true)
     *
     * @param ParamFetcherInterface $paramFetcher
     *
     * @return Response
{% endblock phpdoc_method_header %}
{% block phpdoc_method_annotations %}
{% endblock phpdoc_method_annotations %}
     */
{% block method_definition %}
{% if 'annotation' == format %}
    public function cgetAction(ParamFetcherInterface $paramFetcher)
{% else %}
    public function get{{ entity|pluralize }}Action(ParamFetcherInterface $paramFetcher)
{% endif %}
{% endblock method_definition %}
    {
{% block method_body %}
        $offset = $paramFetcher->get('offset');
        $limit = $paramFetcher->get('limit');
        $orderBy = $paramFetcher->get('order_by');
        $criteria = !is_null($paramFetcher->get('filters')) ? $paramFetcher->get('filters') : [];
        $criteria = array_map(function ($item) {
            $item = $item == 'null' ? null : $item;
            $item = $item == 'false' ? false : $item;
            $item = $item == 'true' ? true : $item;

            return $item;
        }, $criteria);

{% if entity|pluralize|length >= 37 %}
        $result = $this->get{{ entity }}Handler()
            ->find{{ entity|pluralize }}By(
                $criteria,
                $orderBy,
                $limit,
                $offset
            )
        ;
{% else %}
        $result = $this->get{{ entity }}Handler()->find{{ entity|pluralize }}By(
            $criteria,
            $orderBy,
            $limit,
            $offset
        );
{% endif %}

        //If there are no matches return an empty array
        return $result ?: new ArrayCollection([]);
{% endblock method_body %}
    }
