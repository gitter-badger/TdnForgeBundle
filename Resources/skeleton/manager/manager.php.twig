<?php

{% block namespace_block %}
namespace {{ namespace }}\Entity\Manager;
{% endblock %}

{% block use_statements %}
{% if 'annotation' == format %}
use JMS\DiExtraBundle\Annotation as DI;
{% endif %}
use Doctrine\Common\Collections\ArrayCollection;
use {{ namespace }}\Entity{{ entity_namespace ? '\\' ~ entity_namespace : '' }}\{{ entity }}Interface;
{% endblock use_statements %}

/**
{% block phpdoc_class_header %}
 * Auto-generated for type-hinting and auto-completion purposes.
 *
{% if 'annotation' == format %}
 * @DI\Service("{{ service_id }}")
 *
{% endif %}
 * Class {{ entity }}Manager
 * @package {{ namespace }}\Entity\Manager{{ entity_namespace ? '\\' ~ entity_namespace : '' }}
{% endblock phpdoc_class_header %}
 */
{% block class_definition %}
class {{ entity }}Manager extends AbstractManager implements {{ entity }}ManagerInterface
{% endblock class_definition %}
{
{%- block class_body -%}
{%- if 'annotation' == format %}

    /**
     * @DI\InjectParams({
     *     "em" = @DI\Inject("doctrine"),
     *     "class" = "{{ namespace }}\Entity\{{ entity }}",
     *     "formFactory" = @DI\Inject("form.factory")
     * })
     *
     * @param Registry $em
     * @param string $class
     */
    public function __construct(Registry $em, $class)
    {
        $this->em         = $em->getManagerForClass($class);
        $this->class      = $class;
        $this->repository = $em->getRepository($class);
    }
{% endif %}

    /**
     * @param array $criteria
     * @param array $orderBy
     *
     * @return {{ entity }}Interface
     */
    public function find{{ entity }}By(array $criteria, array $orderBy = null)
    {
        return parent::findOneBy($criteria, $orderBy);
    }

    /**
     * @param array $criteria
     * @param array $orderBy
     * @param integer $limit
     * @param integer $offset
     *
     * @return ArrayCollection|{{ entity }}Interface[]
     */
{% if entity|pluralize|length >= 23 %}
    public function find{{ entity|pluralize }}By(
        array $criteria,
        array $orderBy = null,
        $limit = null,
        $offset = null
    ) {
{% else %}
    public function find{{ entity|pluralize }}By(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
{% endif %}
        return parent::findAllBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * @param {{ entity }}Interface ${{ entity|lowerfirst }}
     * @param bool $andFlush
     * @param bool $forceId
     */
{% if entity|length >= 22 %}
    public function update{{ entity }}(
        {{ entity }}Interface ${{ entity|lowerfirst }},
        $andFlush = true,
        $forceId = false
    ) {
{% else %}
    public function update{{ entity }}({{ entity }}Interface ${{ entity|lowerfirst }}, $andFlush = true, $forceId = false)
    {
{% endif %}
        parent::update(${{ entity|lowerfirst }}, $andFlush, $forceId);
    }

    /**
     * @param {{ entity }}Interface ${{ entity|lowerfirst }}
     */
{% if entity|length >= 27 %}
    public function delete{{ entity }}(
        {{ entity }}Interface ${{ entity|lowerfirst }}
    ) {
{% else %}
    public function delete{{ entity }}({{ entity }}Interface ${{ entity|lowerfirst }})
    {
{% endif %}
        parent::delete(${{ entity|lowerfirst }});
    }

    /**
     * @return {{ entity }}Interface
     */
    public function create{{ entity }}({{ entity_construct_params }})
    {
        $class = $this->getClass();
        return new $class({{ construct_params }});
    }
{% endblock class_body %}
}
