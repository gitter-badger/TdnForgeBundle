<?php

namespace Tdn\SfProjectGeneratorBundle\Command;

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Tdn\SfProjectGeneratorBundle\Generator\SonataGenerator;

/**
 * Class GenerateSonataCommand
 * @package Tdn\SfSonataGeneratorBundle\Command
 */
class GenerateSonataCommand extends GeneratorCommand
{
    /**
     * @see Command
     */
    protected function configure()
    {
        $this
            ->setDefinition(array(
                new InputArgument(
                    'entity',
                    InputArgument::REQUIRED,
                    'The entity class name to initialize (shortcut notation)'
                )
            ))
            ->setDescription('Generates sonata scaffolding for an entity.')
            ->setHelp(<<<EOT
The <info>tdn:generate:sonata</info> command generates sonata scaffolding for a Doctrine entity.

Requires a manager like the one generated by the <info>tdn:generate:manager</info> command.

<info>php app/console tdn:generate:sonata AcmeBlogBundle:Post</info>

Every generated file is based on a template. There are default templates but they can be overriden by placing custom templates in one of the following locations, by order of priority:

<info>BUNDLE_PATH/Resources/SensioGeneratorBundle/skeleton/entity
APP_PATH/Resources/SensioGeneratorBundle/skeleton/entity</info>
EOT
            )
            ->setName('tdn:generate:sonata')
        ;
    }

    /**
     * @return EntityGenerator
     */
    public function createGenerator()
    {
        return new SonataGenerator();
    }

    /**
     * @return string
     */
    protected function getFileTypeCreated()
    {
        return 'Sonata Configuration';
    }

    /**
     * @param QuestionHelper $question
     * @param InputInterface $input
     * @param OutputInterface $output
     * @param BundleInterface $bundle
     * @param $metadata
     * @param $entity
     * @param $filename
     */
    protected function generateAdmin(QuestionHelper $question, InputInterface $input, OutputInterface $output, BundleInterface $bundle, $metadata, $entity, $filename)
    {
        $auto = true;

        if ($input->isInteractive()) {
            $auto = $question->ask(
                $input,
                $output,
                new ConfirmationQuestion('Confirm automatic generation of the Admin service?', false)
            );
        }

        if($auto) {
            $group = ucfirst(str_replace('_', ' ',Container::underscore(substr($bundle->getName(), 0, -6))));
            $label = $entity;
            $translationDomain = 'Sonata';

            $groupQuestion = new Question('Group for the admin service: ', $group);
            $groupQuestion->setValidator(array('Sensio\Bundle\GeneratorBundle\Command\Validators', 'validateEntityName'));
            $groupQuestion->setAutocompleterValues([$group]);
            $group = $question->ask(
                $input,
                $output,
                $groupQuestion
            );

            $labelQuestion = new Question('Label for the admin service: ', $label);
            $labelQuestion->setValidator(array('Sensio\Bundle\GeneratorBundle\Command\Validators', 'validateEntityName'));
            $labelQuestion->setAutocompleterValues([$label]);
            $label = $question->ask(
                $input,
                $output,
                $labelQuestion
            );

            $translationDomainQuestion = new Question('Translation domain for the admin service: ', $translationDomain);
            $translationDomainQuestion->setAutocompleterValues([$translationDomain]);
            $translationDomain = $question->ask(
                $input,
                $output,
                $labelQuestion
            );

            $output->write('Creating the service: ');
            $this->getContainer()->get('filesystem')->mkdir($bundle->getPath().'/Resources/config/');
            $admin = new AdminManipulator($bundle->getPath().'/Resources/config/'. $filename);
            try {
                $ret = $auto ? $admin->addResource($bundle, $entity, $group, $label, $translationDomain) : false;
            } catch (\RuntimeException $exc) {
                $ret = false;
            }

            if($ret) {
                $output->write('Creating the Admin class: ');
                $generator = $this->getGenerator($bundle);
                $generator->generateAdminClass($metadata[0], $input->getOption('overwrite'));
            }
        }
    }


    /**
     * @param InputInterface $input
     * @return string
     */
    protected function getAdminFile(InputInterface $input)
    {
        $filename = $input->getOption('admin-file') ?: 'admin.yml';

        return $filename;
    }

    /**
     * @param InputInterface $input
     */
    public function setOptions(InputInterface $input)
    {
        $this->options = [];
    }
}
